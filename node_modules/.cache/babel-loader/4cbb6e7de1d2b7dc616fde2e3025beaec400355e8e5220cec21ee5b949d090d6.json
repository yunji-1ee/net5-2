{"ast":null,"code":"var _jsxFileName = \"/Users/leeyunji/Desktop/24-2/\\u110B\\u1169\\u1111\\u1173\\u11AB\\u1109\\u1169\\u1109\\u1173/HW5 copy/src/pages/ListPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport UserList from \"../components/UserList\";\nimport AddUserModal from \"../components/Modals/AddUserModal\";\nimport EditUserModal from \"../components/Modals/EditUserModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListPage = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null);\n\n  // 사용자 목록 가져오기\n  const fetchUsers = async () => {\n    try {\n      const response = await fetch(\"https://672c8aef1600dda5a9f8de2e.mockapi.io/api/v1/users\");\n      const data = await response.json();\n      setUsers(data);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  // 사용자 삭제\n  const handleDelete = async id => {\n    try {\n      const response = await fetch(`https://672c8aef1600dda5a9f8de2e.mockapi.io/api/v1/users/${id}`, {\n        method: \"DELETE\"\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to delete user\");\n      }\n      fetchUsers();\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      alert(\"Failed to delete user. Please try again.\");\n    }\n  };\n\n  // 사용자 수정\n  const handleEdit = user => {\n    setSelectedUser(user);\n    setIsEditModalOpen(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn add\",\n      onClick: () => setIsAddModalOpen(true),\n      children: \"Add User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserList, {\n      users: users,\n      onDelete: handleDelete,\n      onEdit: handleEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), isAddModalOpen && /*#__PURE__*/_jsxDEV(AddUserModal, {\n      onClose: () => setIsAddModalOpen(false),\n      fetchUsers: fetchUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), isEditModalOpen && selectedUser && /*#__PURE__*/_jsxDEV(EditUserModal, {\n      user: selectedUser,\n      onClose: () => setIsEditModalOpen(false),\n      fetchUsers: fetchUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(ListPage, \"h0GSE34K8/YXJzO8R5skW52+lUY=\");\n_c = ListPage;\nexport default ListPage;\nvar _c;\n$RefreshReg$(_c, \"ListPage\");","map":{"version":3,"names":["React","useState","useEffect","UserList","AddUserModal","EditUserModal","jsxDEV","_jsxDEV","ListPage","_s","users","setUsers","isAddModalOpen","setIsAddModalOpen","isEditModalOpen","setIsEditModalOpen","selectedUser","setSelectedUser","fetchUsers","response","fetch","data","json","error","console","handleDelete","id","method","ok","Error","alert","handleEdit","user","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onDelete","onEdit","onClose","_c","$RefreshReg$"],"sources":["/Users/leeyunji/Desktop/24-2/오픈소스/HW5 copy/src/pages/ListPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport UserList from \"../components/UserList\";\nimport AddUserModal from \"../components/Modals/AddUserModal\";\nimport EditUserModal from \"../components/Modals/EditUserModal\";\n\nconst ListPage = () => {\n  const [users, setUsers] = useState([]);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null);\n\n  // 사용자 목록 가져오기\n  const fetchUsers = async () => {\n    try {\n      const response = await fetch(\"https://672c8aef1600dda5a9f8de2e.mockapi.io/api/v1/users\");\n      const data = await response.json();\n      setUsers(data);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n    }\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  // 사용자 삭제\n  const handleDelete = async (id) => {\n    try {\n      const response = await fetch(`https://672c8aef1600dda5a9f8de2e.mockapi.io/api/v1/users/${id}`, {\n        method: \"DELETE\",\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to delete user\");\n      }\n      fetchUsers();\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      alert(\"Failed to delete user. Please try again.\");\n    }\n  };\n\n  // 사용자 수정\n  const handleEdit = (user) => {\n    setSelectedUser(user);\n    setIsEditModalOpen(true);\n  };\n\n  return (\n    <div>\n      <button className=\"btn add\" onClick={() => setIsAddModalOpen(true)}>\n        Add User\n      </button>\n      <UserList users={users} onDelete={handleDelete} onEdit={handleEdit} />\n      {isAddModalOpen && (\n        <AddUserModal\n          onClose={() => setIsAddModalOpen(false)}\n          fetchUsers={fetchUsers}\n        />\n      )}\n      {isEditModalOpen && selectedUser && (\n        <EditUserModal\n          user={selectedUser}\n          onClose={() => setIsEditModalOpen(false)}\n          fetchUsers={fetchUsers}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ListPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,YAAY,MAAM,mCAAmC;AAC5D,OAAOC,aAAa,MAAM,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAEtD;EACA,MAAMiB,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0DAA0D,CAAC;MACxF,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCX,QAAQ,CAACU,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACdgB,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMO,YAAY,GAAG,MAAOC,EAAE,IAAK;IACjC,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,4DAA4DM,EAAE,EAAE,EAAE;QAC7FC,MAAM,EAAE;MACV,CAAC,CAAC;MACF,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACAX,UAAU,CAAC,CAAC;IACd,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CO,KAAK,CAAC,0CAA0C,CAAC;IACnD;EACF,CAAC;;EAED;EACA,MAAMC,UAAU,GAAIC,IAAI,IAAK;IAC3Bf,eAAe,CAACe,IAAI,CAAC;IACrBjB,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED,oBACER,OAAA;IAAA0B,QAAA,gBACE1B,OAAA;MAAQ2B,SAAS,EAAC,SAAS;MAACC,OAAO,EAAEA,CAAA,KAAMtB,iBAAiB,CAAC,IAAI,CAAE;MAAAoB,QAAA,EAAC;IAEpE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACThC,OAAA,CAACJ,QAAQ;MAACO,KAAK,EAAEA,KAAM;MAAC8B,QAAQ,EAAEf,YAAa;MAACgB,MAAM,EAAEV;IAAW;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACrE3B,cAAc,iBACbL,OAAA,CAACH,YAAY;MACXsC,OAAO,EAAEA,CAAA,KAAM7B,iBAAiB,CAAC,KAAK,CAAE;MACxCK,UAAU,EAAEA;IAAW;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CACF,EACAzB,eAAe,IAAIE,YAAY,iBAC9BT,OAAA,CAACF,aAAa;MACZ2B,IAAI,EAAEhB,YAAa;MACnB0B,OAAO,EAAEA,CAAA,KAAM3B,kBAAkB,CAAC,KAAK,CAAE;MACzCG,UAAU,EAAEA;IAAW;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC9B,EAAA,CAhEID,QAAQ;AAAAmC,EAAA,GAARnC,QAAQ;AAkEd,eAAeA,QAAQ;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}